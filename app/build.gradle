apply plugin: 'com.android.library'
apply plugin: 'realm-android'//consider using provided (add compile option manually)
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        project.archivesBaseName = "secure-userstore"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    maven {   url "${System.env.HOME}/.m2/repository" }
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'
}

realm {
    syncEnabled = true
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task findbugs(type: FindBugs) {
    dependsOn assemble
    group = 'Verification'

    ignoreFailures = false
    effort = "default"
    reportLevel = "medium"
    excludeFilter = file("${projectDir}/../config/findbugs/findbugs-filter.xml")
    classes = files("${projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/findbugs/findbugs-output.xml"
        }
        html {
            destination "$project.buildDir/findbugs/findbugs-output.html"
        }
    }
}

task pmd(type: Pmd) {
    group = 'Verification'
    print "${projectDir}"
    source = fileTree('src/main/java')
    ruleSetFiles = files("${projectDir}/../config/pmd/ruleset.xml")
    ruleSets = [] // This needs to be here to remove the default checks

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task checkstyle(type: Checkstyle) {
    group = 'Test'

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    configFile = file("${projectDir}/../config/checkstyle/checkstyle.xml")

    // empty classpath
    classpath = files()
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    options {
        title = "Realm Android Adapters ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'

        links "http://docs.oracle.com/javase/7/docs/api/"
        links "https://realm.io/docs/java/${rootProject.realmVersion}/api/"
        linksOffline "http://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'sync-user-encryption'
                description 'Android UI adapters for Realm. Realm is a mobile database: a replacement for SQLite & ORMs.'
                url 'http://realm.io'

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                issueManagement {
                    system 'github'
                    url 'https://github.com/realm/realm-android-adapters/issues'
                }
                scm {
                    url 'scm:https://github.com/realm/realm-java'
                    connection 'scm:git@github.com:realm/realm-android-adapters.git'
                    developerConnection 'scm:git@github.com:realm/realm-android-adapters.git'
                }
            }
        }
    }
}

publishing {
    publications {
        AAR(MavenPublication) {
            groupId 'io.realm'
            artifactId 'secure-userstore'
            version project.version
            artifact file("${rootDir}/app/build/outputs/aar/secure-userstore-release.aar")
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
    key = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'

    dryRun = false
    publish = false

    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = 'android-adapters'
        desc = 'Realm Android Adapters'
        websiteUrl = 'http://realm.io'
        issueTrackerUrl = 'https://github.com/realm/realm-android-adapters/issues'
        vcsUrl = 'https://github.com/realm/realm-android-adapters.git'
        licenses = ['Apache-2.0']
        labels = ['android', 'realm']
        publicDownloadNumbers = false
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? bintrayUser : 'noUser'
            password = project.hasProperty('bintrayKey') ? bintrayKey : 'noKey'
            maven = true
        }
        defaults {
            publishConfigs('archives')
            publishPom = true
            publishIvy = false
        }
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// See https://github.com/chrisbanes/gradle-mvn-push/pull/13
afterEvaluate {
    javadoc.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    javadoc.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}